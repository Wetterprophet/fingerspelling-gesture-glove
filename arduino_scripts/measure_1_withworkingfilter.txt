

boolean measure = false; //boolean for flow control


//define settings of measurement
const int duration = 2000; //in milliseconds
const int pause = 25; //in milliseconds
const int steps = duration/pause;

//use pin D5 for starting measurement
const int button_pin = 5;
int button_state = 0;

#include "MegunoLink.h"
#include "Filter.h"
const int filterIntensity = 1;
ExponentialFilter<long> A1Filter(filterIntensity, 0);
ExponentialFilter<long> A2Filter(filterIntensity, 0);
ExponentialFilter<long> A3Filter(filterIntensity, 0);
ExponentialFilter<long> A4Filter(filterIntensity, 0);
ExponentialFilter<long> A5Filter(filterIntensity, 0);
ExponentialFilter<long> A6Filter(filterIntensity, 0);
ExponentialFilter<long> A7Filter(filterIntensity, 0);
long currentMillis = 0;
long lastMeasurement = 0;

void setup() {

  Serial.begin(9600);

}

void loop() {

  //initialize input pins
  //run once

  if(!measure) {

    for (int i = 0; i< size_inPins; i++){

          pinMode(inPins[i], INPUT);
    }
    pinMode(button_pin, INPUT_PULLUP);

    measure = true;


   //end initializing


   //start actual loop
  while (measure) {



     button_state = digitalRead(button_pin);

     //start measuring if button is pressed
     if (button_state == LOW) {


      int sensor_data[steps][size_inPins];
      int startMillis = millis();
      int currentStep = 0;

      while (currentMillis < (startMillis+duration)){
        currentMillis = millis();

          int RawValueA1 = analogRead(A1);
          A1Filter.Filter(RawValueA1);
          int RawValueA2 = analogRead(A2);
          A2Filter.Filter(RawValueA2);
          int RawValueA3 = analogRead(A3);
          A3Filter.Filter(RawValueA3);
          int RawValueA4 = analogRead(A4);
          A4Filter.Filter(RawValueA4);
          int RawValueA5 = analogRead(A5);
          A5Filter.Filter(RawValueA5);
          int RawValueA6 = analogRead(A6);
          A6Filter.Filter(RawValueA6);
          int RawValueA7 = analogRead(A7);
          A7Filter.Filter(RawValueA7);



         if (currentMillis >= lastMeasurement + pause) {  //
            lastMeasurement = millis();

        //    for (int i = 0; i < steps; i++) {
            sensor_data[currentStep][0] = A1Filter.Current();
            sensor_data[currentStep][1] = A2Filter.Current();
            sensor_data[currentStep][2] = A3Filter.Current();
            sensor_data[currentStep][3] = A4Filter.Current();
            sensor_data[currentStep][4] = A5Filter.Current();
            sensor_data[currentStep][5] = A6Filter.Current();
            sensor_data[currentStep][6] = A7Filter.Current();
            currentStep++;

      /*    for (int j = 0; j < size_inPins; j++) {


            sensor_data[i][j] = analogRead(inPins[j]);

            }
            */
        // delay(pause);
    //    }
      }
    //  delay(1);
    } //end while
        //write out sensor data that can be read by python script
        for(int i=0; i<steps;i++){
          if(i>0){
            Serial.print(";");
           }

          for (int j = 0; j<size_inPins; j++) {
           if(j>0){
             Serial.print(",");
           }
            Serial.print(sensor_data[i][j]);
          }
        }
       Serial.print("\n"); //end line to stop reading in

       //set button back to low
       //digitalWrite(button_pin, HIGH);

     }

   }
  }
}
